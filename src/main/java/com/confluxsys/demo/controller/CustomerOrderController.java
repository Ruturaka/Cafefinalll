package com.confluxsys.demo.controller;

import com.confluxsys.demo.bean.CustomerOrder;
import com.confluxsys.demo.bean.OrderItems;
import com.confluxsys.demo.model.Orders.Order;
import com.confluxsys.demo.model.customer.Customer;
import com.confluxsys.demo.model.menu.Menu;
import com.confluxsys.demo.model.orderedItems.OrderedItems;
import com.confluxsys.demo.spring.dao.Order.OrderDao;
import com.confluxsys.demo.spring.dao.customer.CustomerDao;
import com.confluxsys.demo.spring.dao.menu.MenuDao;
import com.confluxsys.demo.spring.dao.orderedItems.OrderedItemsDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
@CrossOrigin(origins = "http://localhost:9999")
@RestController
@RequestMapping("/coapi")
public class CustomerOrderController {
    @Autowired
    CustomerDao customerDao;

    @Autowired
    OrderDao orderDao;

    @Autowired
    OrderedItemsDao orderedItemsDao;

    @Autowired
    MenuDao menuDao;


    @GetMapping("/customers")
    public ResponseEntity<List<Customer>> getCustomerOrders(@RequestParam(required = false) String name, @RequestParam(required = false) String mobile){
        //Find a Customer's all orders he has ordered by name which contains string ‘?’:
        try {
            List<Customer> customers = new ArrayList<Customer>();

            if (name == null && mobile == null)
                customerDao.getAllCustomerOrders().forEach(customers::add);
            else if(name!=null && mobile == null)
                customerDao.findCustOrderByNameContaining(name).forEach(customers::add);
            else if(name==null && mobile!=null)
                customerDao.findCustOrderByMobile(mobile).forEach(customers::add);
            else if(name!=null && mobile!=null)
                customerDao.findCustOrderByMobile(mobile).forEach(customers::add);
            if (customers.isEmpty())
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);

            return new ResponseEntity<>(customers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("customers/history/{mobile}")
    public ResponseEntity<List<Customer>> getCustOrderHistory(@PathVariable("mobile") String mobile){
        try{
            List<Customer> customers=new ArrayList<Customer>();

            if(mobile!=null)
                customerDao.getCustomerHistory(mobile).forEach(customers::add);
            if(customers.isEmpty()){
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(customers, HttpStatus.OK);

        }
        catch (Exception e){
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @GetMapping("/customers/bill/{order_id}")
    public ResponseEntity<Customer> getCustBillByOrderId(@PathVariable("order_id") Integer order_id) {
        Customer customer = customerDao.getBillByOrder_id(order_id);

        if (customer != null) {
            System.out.println("inside if");
            return new ResponseEntity<>(customer, HttpStatus.OK);
        } else {
            System.out.println("inside else");
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

    }
    @GetMapping("/customers/revenue")
    public ResponseEntity<Customer> getCustomerRevenueByMob(@RequestParam(required = false) String mobile){
        //Get revenue generated by a customer by mobile or name
        Customer customer = customerDao.getCustRevenueByMob(mobile);

            if (customer != null)
                return new ResponseEntity<>(customer, HttpStatus.OK);
            else
                return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @GetMapping("/cafe/revenue")
    public ResponseEntity<String> getCafeRevenue(){
        Integer totalRevenue= customerDao.getCafeRevenue();
        return new ResponseEntity<String>("Cafe's Revenue is: "+totalRevenue, HttpStatus.OK);

    }


    @PostMapping("/customers")
    public ResponseEntity<String> createCustomerOrder(@RequestBody CustomerOrder body) {
        try{
            Customer cust = new Customer();
            cust.setName(body.getName());
            cust.setEmail(body.getEmail());
            cust.setMobile(body.getMobile());
            Integer customer_id= customerDao.addCustomer(cust);
            System.out.println("customer_id="+customer_id);

            Order o=new Order(customer_id);
            Integer order_id= orderDao.createOrder(o);
            System.out.println("order_id"+order_id);

            OrderedItems oi= new OrderedItems(order_id);
            List<OrderItems> orderItemsList = body.getOrderItemsList();


            Integer item_id;
            for (OrderItems item : orderItemsList) {
                oi.setOrder_id(order_id);
                oi.setDish(item.getDish());
                oi.setQuantity(item.getQuantity());
                oi.setFeedback(item.getFeedback());
                System.out.println("order - " + oi);
                item_id= orderedItemsDao.createOrderedItems(oi);
                System.out.println("item_id: "+item_id);
            }
            System.out.println("Done!!");

            return new ResponseEntity<String>("CustomerOrder was created successfully with order_id: "+order_id + " and customer_id: "+customer_id, HttpStatus.CREATED);

        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    /*@PutMapping("/customers/{order_id}")
    public ResponseEntity<String> updateCustomer(@PathVariable("order_id") Integer order_id, @RequestBody Customer customer) {
        System.out.println("hi");
        Customer _customer = customerDao.getCustomerById(order_id);
        System.out.println("customer - "+_customer);
        try {
            if (_customer != null) {
                System.out.println("inside if");
                _customer.setName(customer.getName());
                _customer.setEmail(customer.getEmail());
                _customer.setMobile(customer.getMobile());
                System.out.println("updated - "+_customer);
                customerDao.updateCustomer(_customer);
                return new ResponseEntity<>("Customer updated successfully.", HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Cannot find Customer with id=" + customer_id, HttpStatus.NOT_FOUND);
            }
        }catch (Exception e){
            System.out.println(e);
        }
        return null;
    }*/

    @PutMapping("/customers/{order_id}")
    public ResponseEntity<String> updateCustomerOrder(@PathVariable("order_id") Integer order_id, @RequestBody CustomerOrder body) {
        System.out.println("hi");
        orderDao.deleteById(order_id);
        try{
            Customer cust = new Customer();
            cust.setName(body.getName());
            cust.setEmail(body.getEmail());
            cust.setMobile(body.getMobile());
            Integer customer_id= customerDao.addCustomer(cust);
            System.out.println("customer_id="+customer_id);

            Order o=new Order(customer_id);
            Integer order_Id= orderDao.createOrder(o);
            System.out.println("order_id"+order_Id);

            OrderedItems oi= new OrderedItems(order_Id);
            List<OrderItems> orderItemsList = body.getOrderItemsList();

            Integer item_id;
            for (OrderItems item : orderItemsList) {
                oi.setOrder_id(order_Id);
                oi.setDish(item.getDish());
                oi.setQuantity(item.getQuantity());
                oi.setFeedback(item.getFeedback());
                System.out.println("order - " + oi);
                item_id= orderedItemsDao.createOrderedItems(oi);
                System.out.println("item_id: "+item_id);
            }
            System.out.println("Done!!");

            return new ResponseEntity<String>("CustomerOrder was updated successfully with order_id: "+order_id + " and customer_id: "+customer_id, HttpStatus.CREATED);

        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }

    }


    //customer controller -

    @GetMapping("/customer")
    public ResponseEntity<List<Customer>> getAllCustomers(@RequestParam(required = false) String name){
        try {
            List<Customer> customers = new ArrayList<Customer>();

            if (name == null)
                customerDao.findAll().forEach(customers::add);
            else
                customerDao.findByNameContaining(name).forEach(customers::add);
            if (customers.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(customers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @GetMapping("/customer/{id}")
    public ResponseEntity<Customer> getDishById(@PathVariable("id") Integer id) {
        Customer customer = customerDao.findById(id);

        if (customer != null) {
            return new ResponseEntity<>(customer, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/customer")
    public ResponseEntity<String> createCustomer(@RequestBody Customer customer) {
        try {
            customerDao.save(new Customer(customer.getName(), customer.getEmail(), customer.getMobile()));
            return new ResponseEntity<>("Customer created successfully.", HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/customer/{id}")
    public ResponseEntity<String> updateCustomer(@PathVariable("id") Integer id, @RequestBody Customer customer) {
        Customer _customer = customerDao.findById(id);

        if (_customer != null) {
            _customer.setName(customer.getName());
            _customer.setEmail(customer.getEmail());
            _customer.setMobile(customer.getMobile());

            customerDao.update(_customer);
            return new ResponseEntity<>("Customer updated successfully.", HttpStatus.OK);
        }
        else
        {
            return new ResponseEntity<>("Cannot find Customer with id=" + id, HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/customer/{id}")
    public ResponseEntity<String> deleteCustomerById(@PathVariable("id") Integer id) {
        try {
            int result = customerDao.deleteById(id);
            if (result == 0) {
                return new ResponseEntity<>("Cannot find Customer with id=" + id, HttpStatus.OK);
            }
            return new ResponseEntity<>("Customer deleted successfully.", HttpStatus.OK);
        } catch (Exception e) {
            System.out.println(e);
            return new ResponseEntity<>("Cannot delete customer.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/customer")
    public ResponseEntity<String> deleteAll() {
        try {
            int numRows = customerDao.deleteAll();
            return new ResponseEntity<>("Deleted" + numRows + "Customer(s) successfully", HttpStatus.OK);
        }
        catch(Exception e){
            return new ResponseEntity<>("Cannot delete customers", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


}



